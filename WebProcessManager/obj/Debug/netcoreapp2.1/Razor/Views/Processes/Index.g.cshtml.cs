#pragma checksum "C:\Users\Admin\Documents\GitHub\ProcessManager\WebProcessManager\Views\Processes\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "fed25937b3a6d06b41ec46d17162e0b630150e59"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Processes_Index), @"mvc.1.0.view", @"/Views/Processes/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Processes/Index.cshtml", typeof(AspNetCore.Views_Processes_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\Admin\Documents\GitHub\ProcessManager\WebProcessManager\Views\_ViewImports.cshtml"
using WebProcessManager;

#line default
#line hidden
#line 2 "C:\Users\Admin\Documents\GitHub\ProcessManager\WebProcessManager\Views\_ViewImports.cshtml"
using WebProcessManager.Models;

#line default
#line hidden
#line 1 "C:\Users\Admin\Documents\GitHub\ProcessManager\WebProcessManager\Views\Processes\Index.cshtml"
using Newtonsoft.Json;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"fed25937b3a6d06b41ec46d17162e0b630150e59", @"/Views/Processes/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"3d7e11a5e18c91c05c037991f93ad10c1867afd7", @"/Views/_ViewImports.cshtml")]
    public class Views_Processes_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<IEnumerable<WebProcessManager.Models.Process>>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("btn btn-primary btn-sm"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "Create", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(78, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 4 "C:\Users\Admin\Documents\GitHub\ProcessManager\WebProcessManager\Views\Processes\Index.cshtml"
  
    ViewData["Title"] = "Process";
    ViewData["error"] = "";
    Layout = "~/Views/Shared/_Layout.cshtml";

#line default
#line hidden
            BeginContext(199, 35, true);
            WriteLiteral("\r\n\r\n<h2>Processes</h2>\r\n<div>\r\n    ");
            EndContext();
            BeginContext(234, 108, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "df827b7fb852446d8bfe19f073e76c64", async() => {
                BeginContext(288, 50, true);
                WriteLiteral("<span class=\"fa fa-plus-circle\"></span> Create New");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Action = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(342, 3224, true);
            WriteLiteral(@"&nbsp;
    <a class=""btn btn-default btn-sm"" onclick=""refreshClicked()""><span class=""fa fa-sync-alt""></span> Refresh</a>
</div>
<p style=""color: red"" id=""error"">
</p>
<div style=""overflow: auto"">
    <div id=""gridContainer""></div>
</div>

<script>
    function refreshClicked() {
        $(""#gridContainer"").dxDataGrid('instance').refresh();
    }
    $(function () {
        var orders = new DevExpress.data.CustomStore({
            load: function (loadOptions) {
                var deferred = $.Deferred(),
                    args = {};

                if (loadOptions.sort) {
                    args.orderby = loadOptions.sort[0].selector;
                    if (loadOptions.sort[0].desc)
                        args.orderby += "" desc"";
                }

                args.skip = loadOptions.skip || 0;
                args.take = loadOptions.take || 12;

                $.ajax({
                    url: ""processes/GetProcesses"",
                    dataType: ""json"",
         ");
            WriteLiteral(@"           data: args,
                    success: function (result) {
                        console.log(result);
                        deferred.resolve(result.items, { totalCount: result.totalCount });
                    },
                    error: function () {
                        deferred.reject(""Data Loading Error"");
                    },
                    timeout: 5000
                });

                return deferred.promise();
            }
        });

        $(""#gridContainer"").dxDataGrid({
            dataSource: {
                store: orders
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: false,
            showBorders: true,
            columnAutoWidth: true,
            allowColumnResizing: true,
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: ""Search...""
            },
            headerFilter: {
              ");
            WriteLiteral(@"  visible: true
            },
            columnResizingMode: 'widget',
            remoteOperations: {
                sorting: true,
                paging: true
            },
            paging: {
                pageSize: 12
            },
            pager: {
                showPageSizeSelector: true,
                allowedPageSizes: [8, 12, 20]
            },
            columns: [
                {
                    dataField: ""id"",
                    headerCellTemplate: $('<p style=""color: black""><strong>Id</strong></p>'),
                    width: 50,
                    allowResizing: false
                },
                {
                    width: 60,
                    allowFiltering: false,
                    allowSorting: false,
                    allowResizing: false,
                    cellTemplate: function(container, options) {
                        container.append(""<a id='link"" + options.data.id + ""' >Detail</a>"");
                        $(""#");
            WriteLiteral("link\" + options.data.id).click(function() {\r\n                            var id = options.data.id;\r\n                            window.location.href = \'");
            EndContext();
            BeginContext(3567, 34, false);
#line 105 "C:\Users\Admin\Documents\GitHub\ProcessManager\WebProcessManager\Views\Processes\Index.cshtml"
                                               Write(Url.Action("Details", "Processes"));

#line default
#line hidden
            EndContext();
            BeginContext(3601, 3592, true);
            WriteLiteral(@"/' + id;
                        }).css({cursor:""pointer""});
                    }
                },
                {
                    dataField: ""application"",
                    headerCellTemplate: $('<p style=""color: black""><strong>Application</strong></p>')
                },
                {
                    dataField: ""arguments"",
                    headerCellTemplate: $('<p style=""color: black""><strong>Arguments</strong></p>')
                },
                {
                    dataField: ""isRunning"",
                    headerCellTemplate: $('<p style=""color: black""><strong>Status</strong></p>'),
                    width: ""100"",
                    allowFiltering: false,
                    allowSorting: false,
                    cellTemplate: function (container, options) {
                        if (options.value) {
                            $(""<div>"")
                                .append(""<span class='badge runningSpan'>Running</span>"")
                ");
            WriteLiteral(@"                .appendTo(container);
                            $("".runningSpan"").css({ backgroundColor: ""#468847"" });
                        }

                    }
                },
                {
                    dataField: ""autoRestart"",
                    headerCellTemplate: $('<p style=""color: black""><strong>Auto Restart</strong></p>'),
                    width: ""100"",
                    allowFiltering: false,
                    allowSorting: false
                },
                {
                    dataField: ""containerName"",
                    headerCellTemplate: $('<p style=""color: black""><strong>Container</strong></p>'),
                    allowSorting: false
                },
                {
                    allowFiltering: false,
                    allowSorting: false,
                    cellTemplate: function (container, options) {
                        var isRunning = options.data.isRunning;
                        if (isRunning) {
        ");
            WriteLiteral(@"                    container.append(""<a class='btn btn-sm btn-default btnInGrid' id='btnStart"" +
                                    options.data.id + ""' role='button' disabled='disabled'><span class='fa fa-play-circle'></span> Start</a> "")
                                .append(""<a class='btn btn-sm btn-default btnInGrid' id='btnStop"" + options.data.id +""' role='button'><span class='fa fa-stop-circle'></span> Stop</a> "");
                        } else {
                            container.append(""<a class='btn btn-sm btn-default btnInGrid' id='btnStart"" +
                                    options.data.id +
                                    ""' role='button'><span class='fa fa-play-circle'></span> Start</a> "")
                                .append(""<a class='btn btn-sm btn-default btnInGrid' id='btnStop"" + options.data.id +""' role='button' disabled='disabled'><span class='fa fa-stop-circle'></span> Stop</a> "");
                        }
                        container.append(""<a class='bt");
            WriteLiteral(@"n btn-sm btn-default btnInGrid' id='btnRestart"" + options.data.id +""' role='button'><span class='fa fa-sync-alt'></span> Restart</a> "")
                                .append(""<a class='btn btn-sm btn-default btnInGrid' id='btnSync"" + options.data.id + ""'><span class='fa fa-exchange-alt'></span> Sync</a>"")
                            ;
                        var rootUrl = window.location.host;
                        $(""#btnStart"" + options.data.id).click(function () {
                            var url = '");
            EndContext();
            BeginContext(7194, 32, false);
#line 165 "C:\Users\Admin\Documents\GitHub\ProcessManager\WebProcessManager\Views\Processes\Index.cshtml"
                                  Write(Url.Action("Start", "Processes"));

#line default
#line hidden
            EndContext();
            BeginContext(7226, 1302, true);
            WriteLiteral(@"/' + options.data.id;
                            $(""#gridContainer"").block({
                                message: null,
                                overlayCSS: { 
                                backgroundColor: '#000', 
                                opacity:         0, 
                                cursor:          'wait' 
                            }, });
                            $.ajax({
                                url: url
                            }).done(function (data) {
                                $(""#gridContainer"").unblock();
                                if (data) {
                                    alertify.alert(""<p style='color: red'>""+data+""</p>"");
                                    return;
                                }
                                $(""#gridContainer"").dxDataGrid('instance').refresh();
                                })
                                .fail(function (error) {
                                    $(""#gridC");
            WriteLiteral(@"ontainer"").unblock();
                                    alertify.alert(error.responseText);
                                });
                        });
                        $(""#btnStop"" + options.data.id).click(function () {
                            var url = '");
            EndContext();
            BeginContext(8529, 31, false);
#line 189 "C:\Users\Admin\Documents\GitHub\ProcessManager\WebProcessManager\Views\Processes\Index.cshtml"
                                  Write(Url.Action("Stop", "Processes"));

#line default
#line hidden
            EndContext();
            BeginContext(8560, 1311, true);
            WriteLiteral(@"/' + options.data.id;
                            $(""#gridContainer"").block({
                                message: null,
                                overlayCSS: {
                                    backgroundColor: '#000',
                                    opacity: 0,
                                    cursor: 'wait'
                                },
                            });
                            $.ajax({
                                    url: url
                                }).done(function (data) {
                                    $(""#gridContainer"").unblock();
                                    if (data) {
                                        alertify.alert(data);
                                        return;
                                    }
                                    $(""#gridContainer"").dxDataGrid('instance').refresh();
                                })
                                .fail(function (error) {
                     ");
            WriteLiteral(@"               $(""#gridContainer"").unblock();
                                    alertify.alert(error.responseText);
                                });
                        });
                        $(""#btnRestart"").click(function () {
                            var url = '");
            EndContext();
            BeginContext(9872, 32, false);
#line 214 "C:\Users\Admin\Documents\GitHub\ProcessManager\WebProcessManager\Views\Processes\Index.cshtml"
                                  Write(Url.Action("Start", "Processes"));

#line default
#line hidden
            EndContext();
            BeginContext(9904, 1395, true);
            WriteLiteral(@"/' + options.data.id;
                            $(""#gridContainer"").block({
                                message: null,
                                overlayCSS: {
                                    backgroundColor: '#000',
                                    opacity: 0,
                                    cursor: 'wait'
                                },
                            });
                            $.ajax({
                                    url: url
                                }).done(function (data) {
                                    $(""#gridContainer"").unblock();
                                    if (data) {
                                        alertify.alert(data);
                                        return;
                                    }
                                    $(""#gridContainer"").dxDataGrid('instance').refresh();
                                })
                                .fail(function (error) {
                     ");
            WriteLiteral(@"               $(""#gridContainer"").unblock();
                                    alertify.alert(error.responseText);
                                });
                        });
                        $(""#btnDetail"" + options.data.id).click(function() {
                            var id = options.data.id;
                            window.location.href = '");
            EndContext();
            BeginContext(11300, 34, false);
#line 240 "C:\Users\Admin\Documents\GitHub\ProcessManager\WebProcessManager\Views\Processes\Index.cshtml"
                                               Write(Url.Action("Details", "Processes"));

#line default
#line hidden
            EndContext();
            BeginContext(11334, 155, true);
            WriteLiteral("/\' + id;\r\n                        });\r\n                        $(\"#btnSync\" + options.data.id).click(function () {\r\n                            var url = \'");
            EndContext();
            BeginContext(11490, 31, false);
#line 243 "C:\Users\Admin\Documents\GitHub\ProcessManager\WebProcessManager\Views\Processes\Index.cshtml"
                                  Write(Url.Action("Sync", "Processes"));

#line default
#line hidden
            EndContext();
            BeginContext(11521, 1323, true);
            WriteLiteral(@"/' + options.data.id;
                            $(""#gridContainer"").block({
                                message: null,
                                overlayCSS: {
                                    backgroundColor: '#000',
                                    opacity: 0,
                                    cursor: 'wait'
                                },
                            });
                            $.ajax({
                                    url: url
                                }).done(function (data) {
                                    $(""#gridContainer"").unblock();
                                    if (data) {
                                        alertify.alert(data);
                                        return;
                                    }
                                    $(""#gridContainer"").dxDataGrid('instance').refresh();
                                })
                                .fail(function (error) {
                     ");
            WriteLiteral(@"               $(""#gridContainer"").unblock();
                                    alertify.alert(error.responseText);
                                });
                        });
                    }
                }
            ]
        }).dxDataGrid(""instance"");
    });
</script>
");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IEnumerable<WebProcessManager.Models.Process>> Html { get; private set; }
    }
}
#pragma warning restore 1591
